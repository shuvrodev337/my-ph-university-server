import { NextFunction, Request, Response } from 'express';
import catchAsync from '../utils/catchAsync';
import AppError from '../errors/AppError';
import { StatusCodes } from 'http-status-codes';
import jwt, { JwtPayload } from 'jsonwebtoken';
import config from '../config';
import { TUserRole } from '../modules/user/user.interface';

const auth = (...requiredRoles: TUserRole[]) => {
  return catchAsync(async (req: Request, res: Response, next: NextFunction) => {
    const token = req.headers.authorization;

    // checking if the token is missing
    if (!token) {
      throw new AppError(StatusCodes.UNAUTHORIZED, 'You are not authorized!');
    }

    // checking if the given token is valid
    jwt.verify(
      token,
      config.jwt_access_secret as string,
      function (err, decoded) {
        // expected value format of decoded = { data: { userId: '...', role: '...' }, iat: 1736286687, exp: 1737150687 }
        if (err) {
          throw new AppError(
            StatusCodes.UNAUTHORIZED,
            'You are not authorized!',
          );
        }
        req.user = (decoded as JwtPayload)?.data;

        // Authorization
        // tokens are generated by login (admin/faculty/student) and they include the role of the logged in user.
        // Explaination by example:  we should not create a student from a student token. A student should always be created by a coming admin token.
        // So we check the  role in token exists is the required roles.
        // requiredRoles are kept in an array , as a route can be permitted for multiple roles.
        const roleInToken = (decoded as JwtPayload)?.data?.role;
        if (requiredRoles && !requiredRoles.includes(roleInToken)) {
          throw new AppError(
            StatusCodes.UNAUTHORIZED,
            'You are not authorized!',
          );
        }

        next();
      },
    );
  });
};
export default auth;
